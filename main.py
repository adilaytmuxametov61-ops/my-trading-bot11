import os
import time
import requests
import json
from datetime import datetime
import random

# --- –í–ê–®–ò –î–ê–ù–ù–´–ï –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
# –í–ù–ò–ú–ê–ù–ò–ï: –•—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á–∏ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!
TELEGRAM_TOKEN = "8302860595:AAHMnUiWWnjjqNyZa60-srUy1k_Pb_lYhz4"
TELEGRAM_CHAT_ID = "5655533274"
TWELVE_DATA_API_KEY = "75c2f1a180a945f099a6528ed1e8507c"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
SYMBOL = "XAU/USD"
INTERVAL = "5min"  # –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (5 –º–∏–Ω—É—Ç)
EMA_SHORT_PERIOD = 5
EMA_LONG_PERIOD = 10
MACD_FAST_PERIOD = 5
MACD_SLOW_PERIOD = 10
MACD_SIGNAL_PERIOD = 3
STOP_LOSS_PERCENT = 1.0  # 1%, —Ç–∞–∫ –∫–∞–∫ —Å–∫–∞–ª—å–ø–∏–Ω–≥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –º–µ–Ω—å—à–∏–µ —Ü–µ–ª–∏
TAKE_PROFIT_PERCENT = 1.5 # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å 1:1.5
INVESTMENT_PER_TRADE = 20  # –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATS_FILE = "trading_stats.json"

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def load_stats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    if os.path.exists(STATS_FILE):
        try:
            with open(STATS_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError:
            print("–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç
    return {
        "total_signals": 0,
        "profitable_signals": 0,
        "loss_signals": 0,
        "total_profit_loss_usd": 0.0
    }

def save_stats(stats):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª JSON."""
    with open(STATS_FILE, 'w') as f:
        json.dump(stats, f, indent=4)

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∞—à Telegram —á–∞—Ç."""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def get_market_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å Twelve Data."""
    base_url = "https://api.twelvedata.com"
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è EMA, MACD –∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        # –ù–∞–º –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        params = {
            "symbol": SYMBOL,
            "interval": INTERVAL,
            "apikey": TWELVE_DATA_API_KEY,
            "outputsize": 2
        }
        ema_short_data = requests.get(f"{base_url}/ema", params={**params, "time_period": EMA_SHORT_PERIOD}).json()
        ema_long_data = requests.get(f"{base_url}/ema", params={**params, "time_period": EMA_LONG_PERIOD}).json()
        macd_data = requests.get(f"{base_url}/macd", params={**params, "fast_period": MACD_FAST_PERIOD, "slow_period": MACD_SLOW_PERIOD, "signal_period": MACD_SIGNAL_PERIOD}).json()
        price_data = requests.get(f"{base_url}/price", params={"symbol": SYMBOL, "apikey": TWELVE_DATA_API_KEY}).json()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if 'values' not in ema_short_data or 'values' not in ema_long_data or 'values' not in macd_data or 'price' not in price_data:
            print("–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç API. –û—Ç–≤–µ—Ç:", ema_short_data)
            return None

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        data = {
            "price": float(price_data['price']),
            "ema_short_current": float(ema_short_data['values'][0]['ema']),
            "ema_short_previous": float(ema_short_data['values'][1]['ema']),
            "ema_long_current": float(ema_long_data['values'][0]['ema']),
            "ema_long_previous": float(ema_long_data['values'][1]['ema']),
            "macd_current": float(macd_data['values'][0]['macd']),
            "macd_signal_current": float(macd_data['values'][0]['signal']),
            "macd_histogram_current": float(macd_data['values'][0]['histogram']),
            "macd_previous": float(macd_data['values'][1]['macd']),
            "macd_signal_previous": float(macd_data['values'][1]['signal']),
            "macd_histogram_previous": float(macd_data['values'][1]['histogram']),
        }
        return data

    except (requests.exceptions.RequestException, KeyError, IndexError, ValueError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_for_signal(data):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –∏—â–µ—Ç —Å–∏–≥–Ω–∞–ª –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."""
    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ü–û–ö–£–ü–ö–£ (BUY)
    # –ë—ã—Å—Ç—Ä–∞—è EMA –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö –ò MACD –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
    is_buy_signal = (data['ema_short_previous'] < data['ema_long_previous'] and
                     data['ema_short_current'] > data['ema_long_current'] and
                     data['macd_histogram_previous'] < 0 and
                     data['macd_histogram_current'] > 0)

    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ü–†–û–î–ê–ñ–£ (SELL)
    # –ë—ã—Å—Ç—Ä–∞—è EMA –ø–µ—Ä–µ—Å–µ–∫–ª–∞ –º–µ–¥–ª–µ–Ω–Ω—É—é —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ –ò MACD –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
    is_sell_signal = (data['ema_short_previous'] > data['ema_long_previous'] and
                      data['ema_short_current'] < data['ema_long_current'] and
                      data['macd_histogram_previous'] > 0 and
                      data['macd_histogram_current'] < 0)

    if is_buy_signal:
        return "BUY"
    elif is_sell_signal:
        return "SELL"
    else:
        return None

def run_bot():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    stats = load_stats()
    # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Å–∏–≥–Ω–∞–ª–∞
    last_signal_time = 0

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤...")
    send_telegram_message("‚úÖ *–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –¥–ª—è XAU/USD –∑–∞–ø—É—â–µ–Ω.*\n\n"
                          f"**–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** EMA({EMA_SHORT_PERIOD}/{EMA_LONG_PERIOD}) + MACD({MACD_FAST_PERIOD}/{MACD_SLOW_PERIOD}/{MACD_SIGNAL_PERIOD})\n"
                          f"**–¢–∞–π–º—Ñ—Ä–µ–π–º:** {INTERVAL}\n\n"
                          "‚ö†Ô∏è *–ü–æ–º–Ω–∏—Ç–µ –æ –≤—ã—Å–æ–∫–∏—Ö —Ä–∏—Å–∫–∞—Ö! –≠—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è.*")

    while True:
        try:
            data = get_market_data()
            if data:
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')}): –¶–µ–Ω–∞={data['price']:.2f}, "
                      f"EMA{EMA_SHORT_PERIOD}={data['ema_short_current']:.2f}, "
                      f"EMA{EMA_LONG_PERIOD}={data['ema_long_current']:.2f}, "
                      f"MACD={data['macd_current']:.2f}, "
                      f"MACD Signal={data['macd_signal_current']:.2f}, "
                      f"MACD Histogram={data['macd_histogram_current']:.2f}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
                if time.time() - last_signal_time > 300: # –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
                    signal = check_for_signal(data)

                    if signal:
                        last_signal_time = time.time()
                        entry_price = data['price']

                        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if signal == "BUY":
                            stop_loss = entry_price * (1 - STOP_LOSS_PERCENT / 100)
                            take_profit = entry_price * (1 + TAKE_PROFIT_PERCENT / 100)
                            message = (
                                f"üü¢ *–°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£ (BUY) XAU/USD*\n\n"
                                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `${entry_price:.2f}`\n"
                                f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: `${take_profit:.2f}`\n"
                                f"–°—Ç–æ–ø-–ª–æ—Å—Å: `${stop_loss:.2f}` (–†–∏—Å–∫ {STOP_LOSS_PERCENT}%)"
                            )
                        else: # SELL
                            stop_loss = entry_price * (1 + STOP_LOSS_PERCENT / 100)
                            take_profit = entry_price * (1 - TAKE_PROFIT_PERCENT / 100)
                            message = (
                                f"üî¥ *–°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£ (SELL) XAU/USD*\n\n"
                                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: `${entry_price:.2f}`\n"
                                f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: `${take_profit:.2f}`\n"
                                f"–°—Ç–æ–ø-–ª–æ—Å—Å: `${stop_loss:.2f}` (–†–∏—Å–∫ {STOP_LOSS_PERCENT}%)"
                            )

                        send_telegram_message(message)

                        # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
                        stats['total_signals'] += 1

                        # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (55% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö)
                        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∏–∑–≤–µ—Å—Ç–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏
                        if random.random() < 0.55:
                            stats['profitable_signals'] += 1
                            profit = INVESTMENT_PER_TRADE * (TAKE_PROFIT_PERCENT / 100)
                            stats['total_profit_loss_usd'] += profit
                        else:
                            stats['loss_signals'] += 1
                            loss = INVESTMENT_PER_TRADE * (STOP_LOSS_PERCENT / 100)
                            stats['total_profit_loss_usd'] -= loss

                        save_stats(stats)

                        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                        profit_loss_usd = stats['total_profit_loss_usd']
                        profit_loss_text = f"–ü—Ä–∏–±—ã–ª—å: `${profit_loss_usd:.2f}`" if profit_loss_usd >= 0 else f"–£–±—ã—Ç–æ–∫: `${-profit_loss_usd:.2f}`"

                        stats_message = (
                            f"üìä *–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                            f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}\n"
                            f"‚úÖ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {stats['profitable_signals']}\n"
                            f"‚ùå –£–±—ã—Ç–æ—á–Ω—ã—Ö: {stats['loss_signals']}\n\n"
                            f"*–ü—Ä–∏ —Å—Ç–∞–≤–∫–µ ${INVESTMENT_PER_TRADE} –Ω–∞ —Å–∏–≥–Ω–∞–ª, –≤–∞—à–∞ —á–∏—Å—Ç–∞—è {profit_loss_text}*"
                        )
                        send_telegram_message(stats_message)

            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
            # –î–ª—è 5-–º–∏–Ω—É—Ç–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç.
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω Twelve Data –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã, –Ω–µ –¥–µ–ª–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.
            print("–ü–∞—É–∑–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç...")
            time.sleep(300)

        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(60) # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è

if __name__ == "__main__":
    run_bot()
